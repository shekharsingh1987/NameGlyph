name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [ main ]

jobs:
  release:
    name: Release
    # Skip if the triggering commit was a release commit
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      !contains(github.event.workflow_run.head_commit.message, 'chore(release)')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main
          
      - name: Fetch all history and tags
        run: |
          git fetch --prune --unshallow
          git fetch --tags
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Run tests
        run: yarn test
        
      - name: Build package
        run: yarn build

      - name: Git configuration
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
          
      - name: Check if release is needed
        id: check_release
        run: |
          # Try to get the last tag, if it fails, consider it's the first release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            echo "First release - checking all commits"
            COMMITS_TO_CHECK=$(git log --pretty=format:"%s")
          else
            echo "Checking commits since $LAST_TAG"
            COMMITS_TO_CHECK=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s")
          fi
          
          # Skip if the latest commit is a release commit
          LATEST_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          if echo "$LATEST_COMMIT_MSG" | grep -q "^chore(release)"; then
            echo "Skipping: Latest commit is a release commit"
            echo "RELEASE_NEEDED=false" >> $GITHUB_ENV
            exit 0
          fi
          
          if echo "$COMMITS_TO_CHECK" | grep -E "^(feat|fix|breaking):" > /dev/null; then
            echo "RELEASE_NEEDED=true" >> $GITHUB_ENV
            echo "Found commits requiring release"
          else
            echo "RELEASE_NEEDED=false" >> $GITHUB_ENV
            echo "No commits requiring release"
          fi
          
      - name: Generate Release Notes
        if: env.RELEASE_NEEDED == 'true'
        run: |
          # Install conventional-changelog-cli
          yarn add -D conventional-changelog-cli
          
          # For first release, generate complete changelog
          if [ ! -f CHANGELOG.md ]; then
            npx conventional-changelog -p angular -i CHANGELOG.md -s -r 0
          else
            # For subsequent releases, prepend new changes
            npx conventional-changelog -p angular -i CHANGELOG.md -s
          fi
          
          # Generate current version's release notes
          npx conventional-changelog -p angular -r 1 > RELEASE_NOTES.md
          
          # Update package.json changelog field
          RELEASE_NOTES=$(cat RELEASE_NOTES.md)
          npm pkg set changelog="$RELEASE_NOTES"
          
      - name: Bump version and update files
        if: env.RELEASE_NEEDED == 'true'
        run: |
          yarn release
          
      - name: Get version
        if: env.RELEASE_NEEDED == 'true'
        id: get_version
        run: |
          echo "$(node scripts/get-version.js)" >> $GITHUB_ENV
          
      - name: Create and merge release PR
        if: env.RELEASE_NEEDED == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Ensure we're on main and up to date
          git checkout main
          git pull origin main
          
          # Create a new branch for the release
          RELEASE_BRANCH="release/v${{ env.PACKAGE_VERSION }}"
          git checkout -b $RELEASE_BRANCH
          
          # Stage and commit all changes
          git add .
          git commit -m "chore(release): Prepare release v${{ env.PACKAGE_VERSION }}"
          
          # Force push the release branch (in case it exists)
          git push -f origin $RELEASE_BRANCH
          
          # Create PR using GitHub CLI
          PR_URL=$(gh pr create \
            --title "chore(release): Prepare release v${{ env.PACKAGE_VERSION }}" \
            --body "$(cat RELEASE_NOTES.md)" \
            --base main \
            --head $RELEASE_BRANCH \
            --label release \
            --label automated)
          
          echo "Created PR: $PR_URL"
          
          # Wait for checks to complete
          gh pr checks $PR_URL --watch
          
          # If all checks pass, merge the PR
          gh pr merge $PR_URL --admin --merge --delete-branch
          
      - name: Create GitHub Release
        if: env.RELEASE_NEEDED == 'true'
        uses: softprops/action-gh-release@v1
        with:
          body_path: RELEASE_NOTES.md
          tag_name: v${{ env.PACKAGE_VERSION }}
          generate_release_notes: false
          
      - name: Publish to NPM
        if: env.RELEASE_NEEDED == 'true'
        run: yarn publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} 